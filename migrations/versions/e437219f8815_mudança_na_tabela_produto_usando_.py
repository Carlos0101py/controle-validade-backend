"""mudança na tabela produto, usando datetime

Revision ID: e437219f8815
Revises: ef22e6f9a80a
Create Date: 2024-07-30 19:51:26.878220

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'e437219f8815'
down_revision = 'ef22e6f9a80a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('product', schema=None) as batch_op:
       batch_op.alter_column('manufacture_at',
              existing_type=mysql.VARCHAR(length=45),
              type_=sa.DateTime(),
              existing_nullable=False)
       batch_op.alter_column('expiry_at',
              existing_type=mysql.VARCHAR(length=45),
              type_=sa.DateTime(),
              existing_nullable=False)
       
       situation_products = [
              {'name': "Longe a data"},
              {'name': "Proximo a data"},
              {'name': "Produto vencido"},
       ]

       status_products = [
              {'name': "Ativo"},
              {'name': "Concluido"},
       ]

       # Adicionando os dados ao banco de dados
       conn = op.get_bind()
       
       # Inserir dados na tabela situation_product
       for situation in situation_products:
              if not conn.execute(sa.text("SELECT 1 FROM situation_product WHERE name = :name"), {'name': situation['name']}).fetchone():
                     conn.execute(
                     sa.text("INSERT INTO situation_product (name) VALUES (:name)"),
                     {'name': situation['name']}
                     )
              
       # Inserir dados na tabela status_product, se não existirem
       for status in status_products:
              if not conn.execute(sa.text("SELECT 1 FROM status_product WHERE name = :name"), {'name': status['name']}).fetchone():
                     conn.execute(
                     sa.text("INSERT INTO status_product (name) VALUES (:name)"),
                     {'name': status['name']}
                     )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('product', schema=None) as batch_op:
        batch_op.alter_column('expiry_at',
               existing_type=sa.DateTime(),
               type_=mysql.VARCHAR(length=45),
               existing_nullable=False)
        batch_op.alter_column('manufacture_at',
               existing_type=sa.DateTime(),
               type_=mysql.VARCHAR(length=45),
               existing_nullable=False)

    # ### end Alembic commands ###
